name: Automatic Release and Publish

on:
  push:
    branches:
      - 'main' # 当推送到 main 分支时触发

# 为工作流授予创建 PR 和 Release 的权限
permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      # [CORE FIX 2] Ensure the correct output variable name is used
      new_release_published: ${{ steps.release.outputs.release_created }}
      new_release_version: ${{ steps.release.outputs.version }}
      new_release_tag: ${{ steps.release.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Automatic Versioning and Release Creation
        id: release
        # [FIX] Use the new, non-deprecated action name
        uses: googleapis/release-please-action@v4
        with:
          release-type: go
          # [FIX] Removed the unsupported 'package-name' input

      # [NEW] Auto-merge the release PR created by Release Please
      - name: Auto-merge the release PR
        if: ${{ steps.release.outputs.pull_request_number }}
        uses: pascalgn/automerge-action@v0.15.6
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""
          MERGE_METHOD: "squash"
          PULL_REQUEST: "${{ steps.release.outputs.pull_request_number }}"
          
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
            retain_days: 0
            keep_minimum_runs: 2  
        
  build-and-publish:
    # 仅当 release-please 作业成功创建了一个新版本时才运行
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要权限来上传资产到Release
      packages: write # 需要权限来推送到Docker Hub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 运行 go mod tidy 来确保 go.sum 文件存在且是最新
      - name: Tidy Go Modules
        run: go mod tidy

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/cdn-speed-test
          # 这个 action 会自动使用 release-please 创建的 git 标签
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build binaries for different platforms
        run: |
          mkdir -p release # 创建用于存放二进制文件的目录
          GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o release/cdn-speed-test-linux-amd64 ./cmd/cdn-speed-test
          GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o release/cdn-speed-test-windows-amd64.exe ./cmd/cdn-speed-test
          GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o release/cdn-speed-test-darwin-amd64 ./cmd/cdn-speed-test
          GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o release/cdn-speed-test-darwin-arm64 ./cmd/cdn-speed-test

      - name: Upload Assets to Release
        uses: softprops/action-gh-release@v2
        with:
          # 使用 release-please 创建的标签名来定位到正确的 Release
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: release/*
          # Release 的标题和内容由 release-please 自动生成，这里只需上传文件即可
